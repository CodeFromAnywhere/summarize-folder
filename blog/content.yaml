src:
  claimwise:
    full-patent-text:
      FullPatentText.tsx: >
        import {
          LegacyRef,
          PropsWithChildren,
          ReactNode,
          forwardRef,
          useEffect,
          useRef,
          useState,
        } from "react";

        import { useParams } from "react-router-dom";

        import { useTheme } from "@mui/material/styles";

        import FormatListNumberedRoundedIcon from
        "@mui/icons-material/FormatListNumberedRounded";

        import ShortTextRoundedIcon from "@mui/icons-material/ShortTextRounded";

        import ViewHeadlineRoundedIcon from
        "@mui/icons-material/ViewHeadlineRounded";


        import ScrollIntoView from "react-scroll-into-view";


        //Local imports

        import { useAppTheme } from "features/app/theme/useAppTheme";

        import { useFullPatentText } from
        "claimwise/full-patent-text/hooks/useFullPatentText";

        import ArgonBox from "argon-ui-kit/components/ArgonBox";

        import ClaimsSection from "claimwise/full-patent-text/ClaimsSection";

        import DescriptionSection from
        "claimwise/full-patent-text/DescriptionSection";

        import AbstractSection from
        "claimwise/full-patent-text/AbstractSection";

        import FullTextNavigationBarButton, {
          FullTextNavigationBarButtonProps,
        } from "claimwise/full-patent-text/FullTextNavigationBarButton";

        import type { FEFullPatent } from "claimwise/full-patent-text/types";


        import { useStandardizeTexts } from "common/hooks/useStandardizeTexts";

        import { useProject } from "claimwise/projects/hooks/useProject";


        type TabValue = "claims" | "abstract" | "description";


        type FullPatentSectionProps = { data: FEFullPatent | undefined;
        isLoading: boolean };


        type SectionProps = { id: string };


        const Section = forwardRef(
          ({ id, children }: PropsWithChildren<SectionProps>, ref: LegacyRef<HTMLDivElement>) => (
            <div ref={ref} id={id}>
              {children}
            </div>
          ),
        );


        type NavigationTabProps = {
          selectorName: string;
          activeTab: TabValue;
          changeActiveTab: (tab: TabValue) => void;
        } & Omit<FullTextNavigationBarButtonProps, "onClick" | "isActive">;


        const ScrollableNavigationTab = ({
          selectorName,
          activeTab,
          changeActiveTab,
          ...props
        }: NavigationTabProps) => {
          const tabName = selectorName.replace("#", "") as TabValue;

          return (
            <ScrollIntoView selector={selectorName}>
              <FullTextNavigationBarButton
                isActive={activeTab === tabName}
                onClick={() => {
                  if (activeTab !== tabName) {
                    changeActiveTab(tabName);
                  }
                }}
                {...props}
              />
            </ScrollIntoView>
          );
        };


        const FullPatentText = () => {
          const { projectId } = useParams();
          const { palette } = useTheme();
          const { data: fullText, isLoading } = useFullPatentText({ projectId: projectId! });

          const [activeTab, setActiveTab] = useState<TabValue>("abstract");

          /**FIX: Not working properly */

          const sectionRefs = useRef<(HTMLDivElement | null)[]>([]);

          useEffect(() => {
            const observer = new IntersectionObserver(
              (entries) => {
                entries.forEach((entry) => {
                  if (entry.isIntersecting) {
                    setActiveTab(entry.target.getAttribute("id") as TabValue);
                  }
                });
              },
              { threshold: 0.5 },
            );

            sectionRefs.current.forEach((ref) => {
              if (ref) {
                observer.observe(ref);
              }
            });

            return () => {
              sectionRefs.current.forEach((ref) => {
                if (ref) {
                  observer.unobserve(ref);
                }
              });
            };
          }, []);

          const navigationTabs: NavigationTabProps[] = [
            {
              selectorName: "#abstract",
              titleKey: "projects.project_page.full_patent_text_tab.abstract",
              icon: <ShortTextRoundedIcon />,
              activeTab,
              changeActiveTab: setActiveTab,
            },
            {
              selectorName: "#description",
              titleKey: "projects.project_page.full_patent_text_tab.description",
              icon: <ViewHeadlineRoundedIcon />,
              activeTab,
              changeActiveTab: setActiveTab,
            },
            {
              selectorName: "#claims",
              titleKey: "projects.project_page.full_patent_text_tab.claims",
              icon: <FormatListNumberedRoundedIcon />,
              activeTab,
              changeActiveTab: setActiveTab,
            },
          ];

          return (
            <ArgonBox mb={2} flex={1} width="100%" minHeight={0} display={"flex"} flexDirection={"column"}>
              <ArgonBox
                display="flex"
                position="sticky"
                top="0"
                zIndex={99}
                flexWrap={"wrap"}
                sx={{ backgroundColor: palette.background.default }}
              >
                {navigationTabs.map((tab) => (
                  <ScrollableNavigationTab key={tab.titleKey} {...tab} />
                ))}
              </ArgonBox>

              <ArgonBox
                flex={1}
                minHeight={0}
                my={2}
                display="flex"
                flexDirection={"column"}
                gap={4}
                pb={40}
              >
                <Section id="abstract" key={"abstract"} ref={(el) => (sectionRefs.current[0] = el)}>
                  <AbstractSection isLoading={isLoading} data={fullText} />
                </Section>

                <Section id="description" key="description" ref={(el) => (sectionRefs.current[1] = el)}>
                  <DescriptionSection isLoading={isLoading} data={fullText} />
                </Section>

                <Section id="claims" key="claims" ref={(el) => (sectionRefs.current[2] = el)}>
                  <ClaimsSection isLoading={isLoading} data={fullText} />
                </Section>
              </ArgonBox>
            </ArgonBox>
          );
        };


        export type { FullPatentSectionProps };

        export default FullPatentText;
      FullTextNavigationBarButton.tsx: |
        import { ReactNode } from "react";
        import { useTheme } from "@mui/material/styles";

        //Local imports
        import { useStandardizeTexts } from "common/hooks/useStandardizeTexts";
        import ArgonTypography from "argon-ui-kit/components/ArgonTypography";
        import type { TranslationKey } from "assets/locale/types";

        type FullTextNavigationBarButtonProps = {
          icon: ReactNode;
          titleKey: TranslationKey;
          onClick: () => void;
          isActive: boolean;
        };

        const FullTextNavigationBarButton = ({
          icon,
          titleKey,
          onClick,
          isActive,
        }: FullTextNavigationBarButtonProps) => {
          const { translate } = useStandardizeTexts();
          const { typography, functions } = useTheme();

          return (
            <ArgonTypography
              display="flex"
              alignItems="center"
              sx={{
                px: 2,
                py: 0.5,
                gap: 0.65,
                cursor: "pointer",
                color: isActive ? "primary.main" : "text.main ",
                fontWeight: typography.fontWeightRegular,
                fontSize: functions.pxToRem(14),
                ":hover": {
                  color: isActive ? "primary.main" : "text.main",
                },
              }}
              onClick={onClick}
            >
              {icon}
              {translate(titleKey)}
            </ArgonTypography>
          );
        };

        export type { FullTextNavigationBarButtonProps };
        export default FullTextNavigationBarButton;
      FullTextTypography.tsx: >
        import { Fragment } from "react";

        import { useTheme } from "@mui/material/styles";

        import ArgonTypography, { ArgonTypographyProps } from
        "argon-ui-kit/components/ArgonTypography";


        type FullTextTypographyProps = { text: string } & ArgonTypographyProps;


        const FullTextTypography = ({ text, ...props }: FullTextTypographyProps)
        => {
          const { functions } = useTheme();

          const displayText = text.split("\n");

          return (
            <ArgonTypography
              pl={functions.pxToRem(24)}
              pr={2}
              {...props}
              sx={{ ...props?.sx, fontSize: functions.pxToRem(14) }}
            >
              {displayText.map((line, index) => {
                if (line === "" || line === " ") {
                  return <br key={index} />;
                }
                return (
                  <Fragment key={index}>
                    {line}
                    <br />
                  </Fragment>
                );
              })}
            </ArgonTypography>
          );
        };


        export default FullTextTypography;
      AbstractSection.tsx: >
        //Local imports

        import AbsentDataInformativeText from
        "common/components/AbsentDataInformativeText";

        import FullPatentSectionCard from
        "claimwise/full-patent-text/FullPatentSectionCard";

        import FullTextTypography from
        "claimwise/full-patent-text/FullTextTypography";

        import FullPatentSectionHeader from
        "claimwise/full-patent-text/FullPatentSectionHeader";

        import type { FullPatentSectionProps } from
        "claimwise/full-patent-text/FullPatentText";

        import { Skeleton } from "@mui/material";


        const AbstractSection = ({ data, isLoading }: FullPatentSectionProps) =>
        {
          const abstract = data?.abstract.replace("/n", "\n") || "";
          const noAbstract = abstract === "";

          return (
            <>
              <FullPatentSectionHeader title={"projects.project_page.full_patent_text_tab.abstract"} />
              {isLoading ? (
                <Skeleton height={200} width="100%" sx={{ transform: "none" }} />
              ) : noAbstract ? (
                <AbsentDataInformativeText
                  message="projects.project_page.full_patent_text_tab.no_abstract"
                  ml={2}
                />
              ) : (
                <FullPatentSectionCard>
                  <FullTextTypography text={abstract} />
                </FullPatentSectionCard>
              )}
            </>
          );
        };


        export default AbstractSection;
      ClaimsSection.tsx: >
        //Local imports

        import ArgonBox from "argon-ui-kit/components/ArgonBox";

        import ClaimListItem from "claimwise/full-patent-text/ClaimListItem";

        import FullPatentSectionHeader from
        "claimwise/full-patent-text/FullPatentSectionHeader";

        import AbsentDataInformativeText from
        "common/components/AbsentDataInformativeText";

        import type { FullPatentSectionProps } from
        "claimwise/full-patent-text/FullPatentText";

        import { Skeleton } from "@mui/material";


        type ClaimsSectionProps = FullPatentSectionProps;


        const ClaimsSection = ({ isLoading, data }: ClaimsSectionProps) => {
          const claims = data?.claims || [];
          const claimsLength = claims.length;

          return (
            <>
              <FullPatentSectionHeader
                title={"projects.project_page.full_patent_text_tab.claims"}
                titleAppendix={claimsLength}
              />
              {isLoading ? (
                <Skeleton height={200} width="100%" sx={{ transform: "none" }} />
              ) : claimsLength === 0 ? (
                <AbsentDataInformativeText
                  message="projects.project_page.full_patent_text_tab.no_claims"
                  ml={2}
                />
              ) : (
                <ArgonBox my={2}>
                  <ArgonBox display="flex" flexDirection={"column"} gap={2}>
                    {claims.map((claim) => (
                      <ClaimListItem
                        key={claim.claim_number}
                        claim={claim}
                        notShorten={parseInt(claim.claim_number) == 1}
                      />
                    ))}
                  </ArgonBox>
                </ArgonBox>
              )}
            </>
          );
        };


        export default ClaimsSection;
      DescriptionSection.tsx: >
        //Local imports

        import { Skeleton } from "@mui/material";

        import ArgonBox from "argon-ui-kit/components/ArgonBox";

        import DescriptionListItem from
        "claimwise/full-patent-text/DescriptionListItem";

        import FullPatentSectionHeader from
        "claimwise/full-patent-text/FullPatentSectionHeader";

        import type { FullPatentSectionProps } from
        "claimwise/full-patent-text/FullPatentText";

        import AbsentDataInformativeText from
        "common/components/AbsentDataInformativeText";


        type DescriptionSectionProps = FullPatentSectionProps;


        const DescriptionSection = ({ data, isLoading }:
        DescriptionSectionProps) => {
          const description = data?.description || {};
          const noDescription = Object.keys(description).length === 0;

          return (
            <>
              <FullPatentSectionHeader title={"projects.project_page.full_patent_text_tab.description"} />
              {isLoading ? (
                <Skeleton height={400} width="100%" sx={{ transform: "none" }} />
              ) : noDescription ? (
                <AbsentDataInformativeText
                  message="projects.project_page.full_patent_text_tab.no_description"
                  ml={2}
                />
              ) : (
                <ArgonBox display="flex" flexDirection={"column"} gap={2}>
                  {Object.entries(description).map(([key, values]) => (
                    <DescriptionListItem key={key} header={key} paragraphs={values} />
                  ))}
                </ArgonBox>
              )}
            </>
          );
        };


        export default DescriptionSection;
      FullPatentSectionCard.tsx: >
        import { useTheme } from "@mui/material";

        import { PropsWithChildren } from "react";


        //Local imports

        import ArgonBox, { ArgonBoxProps } from
        "argon-ui-kit/components/ArgonBox";


        type FullPatentSectionCardProps = { containerProps?: ArgonBoxProps };


        const FullPatentSectionCard = ({
          children,
          containerProps,
        }: PropsWithChildren<FullPatentSectionCardProps>) => {
          const { borders, palette } = useTheme();

          return (
            <ArgonBox
              px={4}
              py={2}
              {...containerProps}
              sx={{
                ...containerProps?.sx,
                borderRadius: borders.borderRadius.xxl,
                /**@ts-ignore */
                backgroundColor: palette.background.card,
              }}
            >
              {children}
            </ArgonBox>
          );
        };


        export default FullPatentSectionCard;
      FullPatentSectionHeader.tsx: >
        import { useTheme } from "@mui/material/styles";


        //Local imports

        import { useStandardizeTexts } from "common/hooks/useStandardizeTexts";

        import ArgonTypography from "argon-ui-kit/components/ArgonTypography";

        import type { TranslationKey } from "assets/locale/types";


        type FullPatentSectionHeaderProps = {
          title: TranslationKey;
          titleAppendix?: string | number;
        };


        const FullPatentSectionHeader = ({ title, titleAppendix }:
        FullPatentSectionHeaderProps) => {
          const { translate } = useStandardizeTexts();
          const { typography, functions } = useTheme();

          return (
            <ArgonTypography
              textTransform={"uppercase"}
              sx={{
                fontWeight: typography.fontWeightBold,
                fontSize: functions.pxToRem(14),
                my: 1,
                mx: 2,
              }}
            >
              {translate(title)} {titleAppendix ? ` ( ${titleAppendix} )` : ""}
            </ArgonTypography>
          );
        };


        export default FullPatentSectionHeader;
  common:
    components:
      tab:
        CustomTabPanel.tsx: >
          import { ErrorBoundary } from "react-error-boundary";


          //Local imports

          import ArgonBox, { ArgonBoxProps } from
          "argon-ui-kit/components/ArgonBox";

          import ErrorFallback from "common/components/error/ErrorFallback";


          type TabPanelProps = {
            children?: React.ReactNode;
            isVisible: boolean;
            containerProps?: ArgonBoxProps;
          } & ArgonBoxProps;


          const CustomTabPanel = (props: TabPanelProps) => {
            const { children, isVisible, containerProps, ...other } = props;

            return (
              <ArgonBox role="tabpanel" hidden={!isVisible} {...other}>
                {isVisible && (
                  <ErrorBoundary FallbackComponent={ErrorFallback}>
                    <ArgonBox {...containerProps} sx={{ px: 1, ...containerProps?.sx }} color="text">
                      {children}
                    </ArgonBox>
                  </ErrorBoundary>
                )}
              </ArgonBox>
            );
          };

          export default CustomTabPanel;
        TabularPane.tsx: >
          import { useTheme } from "@mui/material/styles";

          import { ErrorBoundary } from "react-error-boundary";

          import { ReactNode, Suspense, useState } from "react";

          import Tabs, { TabsProps } from "@mui/material/Tabs";


          //Local imports

          import { useAppTheme } from "features/app/theme/useAppTheme";

          import ArgonBox, { ArgonBoxProps } from
          "argon-ui-kit/components/ArgonBox";

          import Loading from "common/components/loading/Loading";

          import CustomTabPanel from "common/components/tab/CustomTabPanel";

          import ErrorFallback from "common/components/error/ErrorFallback";


          type TabularPaneProps = {
            expanded?: boolean;
            containerProps?: ArgonBoxProps;
            tabsProps?: Omit<TabsProps, "onChange" | "value">;
            tabs: ReactNode[];
            tabsContext: (activeTab: number) => ReactNode[];
            panelContextProps?: ArgonBoxProps;
          };


          const TabularPane = ({
            expanded,
            containerProps,
            tabsProps,
            tabs,
            tabsContext,
            panelContextProps,
          }: TabularPaneProps) => {
            const [tabValue, setTabValue] = useState(0);
            const { isDarkTheme } = useAppTheme();
            const { palette, functions } = useTheme();
            const borderColor = isDarkTheme ? palette.grey[800] : palette.grey[200];

            return (
              <ArgonBox
                display={"flex"}
                flexDirection={"column"}
                {...containerProps}
                sx={{
                  color: "text.main",
                  ...containerProps?.sx,
                }}
              >
                <Tabs
                  value={tabValue}
                  onChange={(e, newTabValue) => setTabValue(newTabValue)}
                  variant="scrollable"
                  {...tabsProps}
                  sx={{
                    "& .MuiButtonBase-root.MuiTab-root ": {
                      fontWeight: "500",
                      flex: "none",

                      border: `0.2px solid ${borderColor}`,
                      borderBottom: "none",
                    },
                    "& .MuiButtonBase-root.MuiTab-root.Mui-selected": {
                      fontWeight: "bold",
                    },
                    ...tabsProps?.sx,
                  }}
                >
                  {tabs.map((tab) => tab)}
                </Tabs>
                {(expanded === undefined || expanded) && (
                  <ErrorBoundary FallbackComponent={ErrorFallback}>
                    <Suspense fallback={<Loading />}>
                      {tabsContext(tabValue).map((tabContext, index) => {
                        return (
                          <CustomTabPanel isVisible={true} key={index} {...panelContextProps}>
                            {tabContext}
                          </CustomTabPanel>
                        );
                      })}
                    </Suspense>
                  </ErrorBoundary>
                )}
              </ArgonBox>
            );
          };

          export type { TabularPaneProps };

          export default TabularPane;
